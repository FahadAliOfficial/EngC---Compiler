Parsing started
Tokens: ['TYPE(integer)', 'KEYWORD(main)', 'LPAREN(()', 'RPAREN())', 'LBRACE({)', 'TYPE(integer)', 'IDENTIFIER(a)', 'ASSIGN_OP(equals to)', 'NUMBER(10)', 'SEMI(semicolon)', 'TYPE(integer)', 'IDENTIFIER(b)', 'ASSIGN_OP(equals to)', 'NUMBER(20)', 'SEMI(semicolon)', 'TYPE(integer)', 'IDENTIFIER(c)', 'ASSIGN_OP(equals to)', 'IDENTIFIER(b)', 'ARITHMETIC_OP(subtract)', 'IDENTIFIER(a)', 'SEMI(semicolon)', 'TYPE(boolean)', 'IDENTIFIER(is_greater)', 'ASSIGN_OP(equals to)', 'IDENTIFIER(b)', 'RELATIONAL_OP(is greater than)', 'IDENTIFIER(a)', 'SEMI(semicolon)', 'KEYWORD(if)', 'LPAREN(()', 'IDENTIFIER(is_greater)', 'RPAREN())', 'LBRACE({)', 'IDENTIFIER(c)', 'ASSIGN_OP(equals to)', 'IDENTIFIER(c)', 'ARITHMETIC_OP(add)', 'NUMBER(5)', 'SEMI(semicolon)', 'RBRACE(})', 'RBRACE(})', '$($)']

Stack: [0]
Semantic stack depth: 0
Next token: TYPE(integer) -> terminal: integer
Action: shift 1

Stack: [0, 1]
Semantic stack depth: 1
Next token: KEYWORD(main) -> terminal: main
Action: reduce ('Type', 0)

Stack: [0, 7]
Semantic stack depth: 1
Next token: KEYWORD(main) -> terminal: main
Action: shift 8

Stack: [0, 7, 8]
Semantic stack depth: 2
Next token: LPAREN(() -> terminal: (
Action: shift 9

Stack: [0, 7, 8, 9]
Semantic stack depth: 3
Next token: RPAREN()) -> terminal: )
Action: shift 10

Stack: [0, 7, 8, 9, 10]
Semantic stack depth: 4
Next token: LBRACE({) -> terminal: {
Action: shift 11

Stack: [0, 7, 8, 9, 10, 11]
Semantic stack depth: 5
Next token: TYPE(integer) -> terminal: integer
Action: shift 16

Stack: [0, 7, 8, 9, 10, 11, 16]
Semantic stack depth: 6
Next token: IDENTIFIER(a) -> terminal: IDENTIFIER
Action: reduce ('Type', 0)

Stack: [0, 7, 8, 9, 10, 11, 28]
Semantic stack depth: 6
Next token: IDENTIFIER(a) -> terminal: IDENTIFIER
Action: shift 53

Stack: [0, 7, 8, 9, 10, 11, 28, 53]
Semantic stack depth: 7
Next token: ASSIGN_OP(equals to) -> terminal: equals to
Action: shift 89

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89]
Semantic stack depth: 8
Next token: NUMBER(10) -> terminal: NUMBER
Action: shift 35

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 35]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Factor', 1)

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 47]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 46]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Term', 0)

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 45]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('ArithmeticExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 44]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('RelationalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 43]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('LogicalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 42]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Expression', 0)

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 133]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Declaration', 0)

Stack: [0, 7, 8, 9, 10, 11, 23]
Semantic stack depth: 6
Next token: SEMI(semicolon) -> terminal: semicolon
Action: shift 51

Stack: [0, 7, 8, 9, 10, 11, 23, 51]
Semantic stack depth: 7
Next token: TYPE(integer) -> terminal: integer
Action: reduce ('Statement', 0)

Stack: [0, 7, 8, 9, 10, 11, 22]
Semantic stack depth: 6
Next token: TYPE(integer) -> terminal: integer
Action: reduce ('StatementList', 0)

Stack: [0, 7, 8, 9, 10, 11, 21]
Semantic stack depth: 6
Next token: TYPE(integer) -> terminal: integer
Action: shift 16

Stack: [0, 7, 8, 9, 10, 11, 21, 16]
Semantic stack depth: 7
Next token: IDENTIFIER(b) -> terminal: IDENTIFIER
Action: reduce ('Type', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28]
Semantic stack depth: 7
Next token: IDENTIFIER(b) -> terminal: IDENTIFIER
Action: shift 53

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53]
Semantic stack depth: 8
Next token: ASSIGN_OP(equals to) -> terminal: equals to
Action: shift 89

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89]
Semantic stack depth: 9
Next token: NUMBER(20) -> terminal: NUMBER
Action: shift 35

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 35]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Factor', 1)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 47]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 46]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Term', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('ArithmeticExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('RelationalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 43]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('LogicalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 42]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Expression', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 133]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Declaration', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 23]
Semantic stack depth: 7
Next token: SEMI(semicolon) -> terminal: semicolon
Action: shift 51

Stack: [0, 7, 8, 9, 10, 11, 21, 23, 51]
Semantic stack depth: 8
Next token: TYPE(integer) -> terminal: integer
Action: reduce ('Statement', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 50]
Semantic stack depth: 7
Next token: TYPE(integer) -> terminal: integer
Action: reduce ('StatementList', 1)

Stack: [0, 7, 8, 9, 10, 11, 21]
Semantic stack depth: 6
Next token: TYPE(integer) -> terminal: integer
Action: shift 16

Stack: [0, 7, 8, 9, 10, 11, 21, 16]
Semantic stack depth: 7
Next token: IDENTIFIER(c) -> terminal: IDENTIFIER
Action: reduce ('Type', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28]
Semantic stack depth: 7
Next token: IDENTIFIER(c) -> terminal: IDENTIFIER
Action: shift 53

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53]
Semantic stack depth: 8
Next token: ASSIGN_OP(equals to) -> terminal: equals to
Action: shift 89

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89]
Semantic stack depth: 9
Next token: IDENTIFIER(b) -> terminal: IDENTIFIER
Action: shift 34

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 34]
Semantic stack depth: 10
Next token: ARITHMETIC_OP(subtract) -> terminal: subtract
Action: reduce ('Factor', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 47]
Semantic stack depth: 10
Next token: ARITHMETIC_OP(subtract) -> terminal: subtract
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 46]
Semantic stack depth: 10
Next token: ARITHMETIC_OP(subtract) -> terminal: subtract
Action: reduce ('Term', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45]
Semantic stack depth: 10
Next token: ARITHMETIC_OP(subtract) -> terminal: subtract
Action: reduce ('ArithmeticExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44]
Semantic stack depth: 10
Next token: ARITHMETIC_OP(subtract) -> terminal: subtract
Action: shift 77

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44, 77]
Semantic stack depth: 11
Next token: IDENTIFIER(a) -> terminal: IDENTIFIER
Action: shift 34

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44, 77, 34]
Semantic stack depth: 12
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Factor', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44, 77, 47]
Semantic stack depth: 12
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44, 77, 46]
Semantic stack depth: 12
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Term', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44, 77, 113]
Semantic stack depth: 12
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('ArithmeticExpr', 2)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('RelationalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 43]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('LogicalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 42]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Expression', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 133]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Declaration', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 23]
Semantic stack depth: 7
Next token: SEMI(semicolon) -> terminal: semicolon
Action: shift 51

Stack: [0, 7, 8, 9, 10, 11, 21, 23, 51]
Semantic stack depth: 8
Next token: TYPE(boolean) -> terminal: boolean
Action: reduce ('Statement', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 50]
Semantic stack depth: 7
Next token: TYPE(boolean) -> terminal: boolean
Action: reduce ('StatementList', 1)

Stack: [0, 7, 8, 9, 10, 11, 21]
Semantic stack depth: 6
Next token: TYPE(boolean) -> terminal: boolean
Action: shift 19

Stack: [0, 7, 8, 9, 10, 11, 21, 19]
Semantic stack depth: 7
Next token: IDENTIFIER(is_greater) -> terminal: IDENTIFIER
Action: reduce ('Type', 3)

Stack: [0, 7, 8, 9, 10, 11, 21, 28]
Semantic stack depth: 7
Next token: IDENTIFIER(is_greater) -> terminal: IDENTIFIER
Action: shift 53

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53]
Semantic stack depth: 8
Next token: ASSIGN_OP(equals to) -> terminal: equals to
Action: shift 89

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89]
Semantic stack depth: 9
Next token: IDENTIFIER(b) -> terminal: IDENTIFIER
Action: shift 34

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 34]
Semantic stack depth: 10
Next token: RELATIONAL_OP(is greater than) -> terminal: is greater than
Action: reduce ('Factor', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 47]
Semantic stack depth: 10
Next token: RELATIONAL_OP(is greater than) -> terminal: is greater than
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 46]
Semantic stack depth: 10
Next token: RELATIONAL_OP(is greater than) -> terminal: is greater than
Action: reduce ('Term', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45]
Semantic stack depth: 10
Next token: RELATIONAL_OP(is greater than) -> terminal: is greater than
Action: reduce ('ArithmeticExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44]
Semantic stack depth: 10
Next token: RELATIONAL_OP(is greater than) -> terminal: is greater than
Action: shift 80

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44, 80]
Semantic stack depth: 11
Next token: IDENTIFIER(a) -> terminal: IDENTIFIER
Action: shift 114

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44, 80, 114]
Semantic stack depth: 12
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Factor', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44, 80, 123]
Semantic stack depth: 12
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44, 80, 122]
Semantic stack depth: 12
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Term', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44, 80, 121]
Semantic stack depth: 12
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('ArithmeticExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44, 80, 125]
Semantic stack depth: 12
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('RelationalExpr', 3)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 43]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('LogicalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 42]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Expression', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 133]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Declaration', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 23]
Semantic stack depth: 7
Next token: SEMI(semicolon) -> terminal: semicolon
Action: shift 51

Stack: [0, 7, 8, 9, 10, 11, 21, 23, 51]
Semantic stack depth: 8
Next token: KEYWORD(if) -> terminal: if
Action: reduce ('Statement', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 50]
Semantic stack depth: 7
Next token: KEYWORD(if) -> terminal: if
Action: reduce ('StatementList', 1)

Stack: [0, 7, 8, 9, 10, 11, 21]
Semantic stack depth: 6
Next token: KEYWORD(if) -> terminal: if
Action: shift 12

Stack: [0, 7, 8, 9, 10, 11, 21, 12]
Semantic stack depth: 7
Next token: LPAREN(() -> terminal: (
Action: shift 30

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30]
Semantic stack depth: 8
Next token: IDENTIFIER(is_greater) -> terminal: IDENTIFIER
Action: shift 55

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 55]
Semantic stack depth: 9
Next token: RPAREN()) -> terminal: )
Action: reduce ('Factor', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 67]
Semantic stack depth: 9
Next token: RPAREN()) -> terminal: )
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 66]
Semantic stack depth: 9
Next token: RPAREN()) -> terminal: )
Action: reduce ('Term', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 65]
Semantic stack depth: 9
Next token: RPAREN()) -> terminal: )
Action: reduce ('ArithmeticExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 64]
Semantic stack depth: 9
Next token: RPAREN()) -> terminal: )
Action: reduce ('RelationalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 63]
Semantic stack depth: 9
Next token: RPAREN()) -> terminal: )
Action: reduce ('LogicalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 62]
Semantic stack depth: 9
Next token: RPAREN()) -> terminal: )
Action: reduce ('Expression', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 61]
Semantic stack depth: 9
Next token: RPAREN()) -> terminal: )
Action: reduce ('Condition', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68]
Semantic stack depth: 9
Next token: RPAREN()) -> terminal: )
Action: shift 106

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106]
Semantic stack depth: 10
Next token: LBRACE({) -> terminal: {
Action: shift 158

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158]
Semantic stack depth: 11
Next token: IDENTIFIER(c) -> terminal: IDENTIFIER
Action: shift 20

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20]
Semantic stack depth: 12
Next token: ASSIGN_OP(equals to) -> terminal: equals to
Action: shift 48

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48]
Semantic stack depth: 13
Next token: IDENTIFIER(c) -> terminal: IDENTIFIER
Action: shift 34

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48, 34]
Semantic stack depth: 14
Next token: ARITHMETIC_OP(add) -> terminal: add
Action: reduce ('Factor', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48, 47]
Semantic stack depth: 14
Next token: ARITHMETIC_OP(add) -> terminal: add
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48, 46]
Semantic stack depth: 14
Next token: ARITHMETIC_OP(add) -> terminal: add
Action: reduce ('Term', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48, 45]
Semantic stack depth: 14
Next token: ARITHMETIC_OP(add) -> terminal: add
Action: reduce ('ArithmeticExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48, 44]
Semantic stack depth: 14
Next token: ARITHMETIC_OP(add) -> terminal: add
Action: shift 76

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48, 44, 76]
Semantic stack depth: 15
Next token: NUMBER(5) -> terminal: NUMBER
Action: shift 35

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48, 44, 76, 35]
Semantic stack depth: 16
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Factor', 1)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48, 44, 76, 47]
Semantic stack depth: 16
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48, 44, 76, 46]
Semantic stack depth: 16
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Term', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48, 44, 76, 112]
Semantic stack depth: 16
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('ArithmeticExpr', 1)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48, 44]
Semantic stack depth: 14
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('RelationalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48, 43]
Semantic stack depth: 14
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('LogicalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48, 42]
Semantic stack depth: 14
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Expression', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 20, 48, 88]
Semantic stack depth: 14
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Assignment', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 24]
Semantic stack depth: 12
Next token: SEMI(semicolon) -> terminal: semicolon
Action: shift 52

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 24, 52]
Semantic stack depth: 13
Next token: RBRACE(}) -> terminal: }
Action: reduce ('Statement', 1)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 22]
Semantic stack depth: 12
Next token: RBRACE(}) -> terminal: }
Action: reduce ('StatementList', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 176]
Semantic stack depth: 12
Next token: RBRACE(}) -> terminal: }
Action: shift 193

Stack: [0, 7, 8, 9, 10, 11, 21, 12, 30, 68, 106, 158, 176, 193]
Semantic stack depth: 13
Next token: RBRACE(}) -> terminal: }
Action: reduce ('IfStatement', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 25]
Semantic stack depth: 7
Next token: RBRACE(}) -> terminal: }
Action: reduce ('Statement', 2)

Stack: [0, 7, 8, 9, 10, 11, 21, 50]
Semantic stack depth: 7
Next token: RBRACE(}) -> terminal: }
Action: reduce ('StatementList', 1)

Stack: [0, 7, 8, 9, 10, 11, 21]
Semantic stack depth: 6
Next token: RBRACE(}) -> terminal: }
Action: shift 49

Stack: [0, 7, 8, 9, 10, 11, 21, 49]
Semantic stack depth: 7
Next token: $($) -> terminal: $
Action: reduce ('MainFunction', 0)

Stack: [0, 6]
Semantic stack depth: 1
Next token: $($) -> terminal: $
Action: reduce ('Program', 0)

Stack: [0, 5]
Semantic stack depth: 1
Next token: $($) -> terminal: $
Action: accept 
Input accepted!
