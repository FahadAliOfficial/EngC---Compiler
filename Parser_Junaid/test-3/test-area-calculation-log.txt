Parsing started
Tokens: ['TYPE(integer)', 'KEYWORD(main)', 'LPAREN(()', 'RPAREN())', 'LBRACE({)', 'TYPE(float)', 'IDENTIFIER(radius)', 'ASSIGN_OP(equals to)', 'NUMBER(5)', 'SEMI(semicolon)', 'TYPE(float)', 'IDENTIFIER(pi)', 'ASSIGN_OP(equals to)', 'FLOAT(3.14)', 'SEMI(semicolon)', 'TYPE(float)', 'IDENTIFIER(area)', 'ASSIGN_OP(equals to)', 'IDENTIFIER(pi)', 'ARITHMETIC_OP(multiply)', 'IDENTIFIER(radius)', 'ARITHMETIC_OP(multiply)', 'IDENTIFIER(radius)', 'SEMI(semicolon)', 'KEYWORD(return)', 'IDENTIFIER(area)', 'SEMI(semicolon)', 'RBRACE(})', '$($)']

Stack: [0]
Semantic stack depth: 0
Next token: TYPE(integer) -> terminal: integer
Action: shift 1

Stack: [0, 1]
Semantic stack depth: 1
Next token: KEYWORD(main) -> terminal: main
Action: reduce ('Type', 0)

Stack: [0, 7]
Semantic stack depth: 1
Next token: KEYWORD(main) -> terminal: main
Action: shift 8

Stack: [0, 7, 8]
Semantic stack depth: 2
Next token: LPAREN(() -> terminal: (
Action: shift 9

Stack: [0, 7, 8, 9]
Semantic stack depth: 3
Next token: RPAREN()) -> terminal: )
Action: shift 10

Stack: [0, 7, 8, 9, 10]
Semantic stack depth: 4
Next token: LBRACE({) -> terminal: {
Action: shift 11

Stack: [0, 7, 8, 9, 10, 11]
Semantic stack depth: 5
Next token: TYPE(float) -> terminal: float
Action: shift 17

Stack: [0, 7, 8, 9, 10, 11, 17]
Semantic stack depth: 6
Next token: IDENTIFIER(radius) -> terminal: IDENTIFIER
Action: reduce ('Type', 1)

Stack: [0, 7, 8, 9, 10, 11, 28]
Semantic stack depth: 6
Next token: IDENTIFIER(radius) -> terminal: IDENTIFIER
Action: shift 53

Stack: [0, 7, 8, 9, 10, 11, 28, 53]
Semantic stack depth: 7
Next token: ASSIGN_OP(equals to) -> terminal: equals to
Action: shift 89

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89]
Semantic stack depth: 8
Next token: NUMBER(5) -> terminal: NUMBER
Action: shift 35

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 35]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Factor', 1)

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 47]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 46]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Term', 0)

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 45]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('ArithmeticExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 44]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('RelationalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 43]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('LogicalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 42]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Expression', 0)

Stack: [0, 7, 8, 9, 10, 11, 28, 53, 89, 133]
Semantic stack depth: 9
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Declaration', 0)

Stack: [0, 7, 8, 9, 10, 11, 23]
Semantic stack depth: 6
Next token: SEMI(semicolon) -> terminal: semicolon
Action: shift 51

Stack: [0, 7, 8, 9, 10, 11, 23, 51]
Semantic stack depth: 7
Next token: TYPE(float) -> terminal: float
Action: reduce ('Statement', 0)

Stack: [0, 7, 8, 9, 10, 11, 22]
Semantic stack depth: 6
Next token: TYPE(float) -> terminal: float
Action: reduce ('StatementList', 0)

Stack: [0, 7, 8, 9, 10, 11, 21]
Semantic stack depth: 6
Next token: TYPE(float) -> terminal: float
Action: shift 17

Stack: [0, 7, 8, 9, 10, 11, 21, 17]
Semantic stack depth: 7
Next token: IDENTIFIER(pi) -> terminal: IDENTIFIER
Action: reduce ('Type', 1)

Stack: [0, 7, 8, 9, 10, 11, 21, 28]
Semantic stack depth: 7
Next token: IDENTIFIER(pi) -> terminal: IDENTIFIER
Action: shift 53

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53]
Semantic stack depth: 8
Next token: ASSIGN_OP(equals to) -> terminal: equals to
Action: shift 89

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89]
Semantic stack depth: 9
Next token: FLOAT(3.14) -> terminal: FLOAT
Action: shift 36

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 36]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Factor', 2)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 47]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 46]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Term', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('ArithmeticExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('RelationalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 43]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('LogicalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 42]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Expression', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 133]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Declaration', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 23]
Semantic stack depth: 7
Next token: SEMI(semicolon) -> terminal: semicolon
Action: shift 51

Stack: [0, 7, 8, 9, 10, 11, 21, 23, 51]
Semantic stack depth: 8
Next token: TYPE(float) -> terminal: float
Action: reduce ('Statement', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 50]
Semantic stack depth: 7
Next token: TYPE(float) -> terminal: float
Action: reduce ('StatementList', 1)

Stack: [0, 7, 8, 9, 10, 11, 21]
Semantic stack depth: 6
Next token: TYPE(float) -> terminal: float
Action: shift 17

Stack: [0, 7, 8, 9, 10, 11, 21, 17]
Semantic stack depth: 7
Next token: IDENTIFIER(area) -> terminal: IDENTIFIER
Action: reduce ('Type', 1)

Stack: [0, 7, 8, 9, 10, 11, 21, 28]
Semantic stack depth: 7
Next token: IDENTIFIER(area) -> terminal: IDENTIFIER
Action: shift 53

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53]
Semantic stack depth: 8
Next token: ASSIGN_OP(equals to) -> terminal: equals to
Action: shift 89

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89]
Semantic stack depth: 9
Next token: IDENTIFIER(pi) -> terminal: IDENTIFIER
Action: shift 34

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 34]
Semantic stack depth: 10
Next token: ARITHMETIC_OP(multiply) -> terminal: multiply
Action: reduce ('Factor', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 47]
Semantic stack depth: 10
Next token: ARITHMETIC_OP(multiply) -> terminal: multiply
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 46]
Semantic stack depth: 10
Next token: ARITHMETIC_OP(multiply) -> terminal: multiply
Action: reduce ('Term', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45]
Semantic stack depth: 10
Next token: ARITHMETIC_OP(multiply) -> terminal: multiply
Action: shift 84

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45, 84]
Semantic stack depth: 11
Next token: IDENTIFIER(radius) -> terminal: IDENTIFIER
Action: shift 34

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45, 84, 34]
Semantic stack depth: 12
Next token: ARITHMETIC_OP(multiply) -> terminal: multiply
Action: reduce ('Factor', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45, 84, 47]
Semantic stack depth: 12
Next token: ARITHMETIC_OP(multiply) -> terminal: multiply
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45, 84, 129]
Semantic stack depth: 12
Next token: ARITHMETIC_OP(multiply) -> terminal: multiply
Action: reduce ('Term', 1)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45]
Semantic stack depth: 10
Next token: ARITHMETIC_OP(multiply) -> terminal: multiply
Action: shift 84

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45, 84]
Semantic stack depth: 11
Next token: IDENTIFIER(radius) -> terminal: IDENTIFIER
Action: shift 34

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45, 84, 34]
Semantic stack depth: 12
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Factor', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45, 84, 47]
Semantic stack depth: 12
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45, 84, 129]
Semantic stack depth: 12
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Term', 1)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 45]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('ArithmeticExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 44]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('RelationalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 43]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('LogicalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 42]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Expression', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 28, 53, 89, 133]
Semantic stack depth: 10
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Declaration', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 23]
Semantic stack depth: 7
Next token: SEMI(semicolon) -> terminal: semicolon
Action: shift 51

Stack: [0, 7, 8, 9, 10, 11, 21, 23, 51]
Semantic stack depth: 8
Next token: KEYWORD(return) -> terminal: return
Action: reduce ('Statement', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 50]
Semantic stack depth: 7
Next token: KEYWORD(return) -> terminal: return
Action: reduce ('StatementList', 1)

Stack: [0, 7, 8, 9, 10, 11, 21]
Semantic stack depth: 6
Next token: KEYWORD(return) -> terminal: return
Action: shift 15

Stack: [0, 7, 8, 9, 10, 11, 21, 15]
Semantic stack depth: 7
Next token: IDENTIFIER(area) -> terminal: IDENTIFIER
Action: shift 34

Stack: [0, 7, 8, 9, 10, 11, 21, 15, 34]
Semantic stack depth: 8
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Factor', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 15, 47]
Semantic stack depth: 8
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('PowerExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 15, 46]
Semantic stack depth: 8
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Term', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 15, 45]
Semantic stack depth: 8
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('ArithmeticExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 15, 44]
Semantic stack depth: 8
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('RelationalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 15, 43]
Semantic stack depth: 8
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('LogicalExpr', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 15, 42]
Semantic stack depth: 8
Next token: SEMI(semicolon) -> terminal: semicolon
Action: reduce ('Expression', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 15, 41]
Semantic stack depth: 8
Next token: SEMI(semicolon) -> terminal: semicolon
Action: shift 73

Stack: [0, 7, 8, 9, 10, 11, 21, 15, 41, 73]
Semantic stack depth: 9
Next token: RBRACE(}) -> terminal: }
Action: reduce ('ReturnStatement', 0)

Stack: [0, 7, 8, 9, 10, 11, 21, 29]
Semantic stack depth: 7
Next token: RBRACE(}) -> terminal: }
Action: reduce ('Statement', 5)

Stack: [0, 7, 8, 9, 10, 11, 21, 50]
Semantic stack depth: 7
Next token: RBRACE(}) -> terminal: }
Action: reduce ('StatementList', 1)

Stack: [0, 7, 8, 9, 10, 11, 21]
Semantic stack depth: 6
Next token: RBRACE(}) -> terminal: }
Action: shift 49

Stack: [0, 7, 8, 9, 10, 11, 21, 49]
Semantic stack depth: 7
Next token: $($) -> terminal: $
Action: reduce ('MainFunction', 0)

Stack: [0, 6]
Semantic stack depth: 1
Next token: $($) -> terminal: $
Action: reduce ('Program', 0)

Stack: [0, 5]
Semantic stack depth: 1
Next token: $($) -> terminal: $
Action: accept 
Input accepted!
